/*
 * This file is part of Haveno.
 *
 * Haveno is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Haveno is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Haveno. If not, see <http://www.gnu.org/licenses/>.
 */
plugins {
    id 'java-library'
}

import static org.gradle.internal.os.OperatingSystem.current

def copyStartScripts = tasks.register('copyStartScripts', Copy) {
    description = "Copies assembled distribution start scripts to root project directory."
    from layout.buildDirectory.dir('scripts')
    into projectDir
}

def copyDistributionLib = tasks.register('copyDistributionLib', Copy) {
    description = "Extracts zipped distribution lib directory to root project directory."
    dependsOn 'copyStartScripts'
    def distFolderName = project.name + '-' + version
    def distZipName = buildDir.name + '/distributions/' + distFolderName + '.zip'
    from(zipTree(distZipName)) {
        include "$distFolderName/lib/**"
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(2))
        }
        includeEmptyDirs = false
    }
    into "${projectDir}/lib"
}

def editStartScriptAppHomeVar = tasks.register('editStartScriptAppHomeVar') {
    description = "Edit generated start script so it expects to be executed in project root dir (not the 'bin' dir)."
    dependsOn 'copyStartScripts'
    doLast {
        def isWindowsOs = current().isWindows()
        if (isWindowsOs) {
            // Delete the *nix script, not the windows .bat script.
            delete fileTree(dir: projectDir, include: project.name)
            // Reset APP_HOME variable in windows .bat script.
            def windowsScriptFile = file("${projectDir}/${project.name}.bat")
            windowsScriptFile.text = windowsScriptFile.text.replace('set APP_HOME=%DIRNAME%..', 'set APP_HOME=%DIRNAME%')
        } else {
            // Delete the windows .bat script, not the *nix script alone.
            delete fileTree(dir: projectDir, include: "${project.name}.bat")
            // Reset APP_HOME variable in *nix script.
            def nixScriptFile = file("${projectDir}/${project.name}")
            def oldAppHome = 'APP_HOME=$( cd "${APP_HOME:-./}.." && pwd -P ) || exit'
            def newAppHome = 'APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit'
            nixScriptFile.text = nixScriptFile.text.replace(oldAppHome, newAppHome)
        }
    }
}

def postBuild = tasks.register('postBuild') {
    description = "Makes distribution's start script runnable from project root directory."
    dependsOn 'copyStartScripts', 'copyDistributionLib', 'editStartScriptAppHomeVar'
}

def buildTask = tasks.findByName('build')
buildTask.configure { finalizedBy postBuild }
